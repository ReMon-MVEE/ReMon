From 424b9794f9aa1f39856e0727cf1b6d3195295081 Mon Sep 17 00:00:00 2001
From: babrath <bert.abrath@UGent.be>
Date: Thu, 11 Jun 2020 10:31:23 +0200
Subject: [PATCH] patch

---
 gobject/gparam.c  | 10 +++++-----
 gobject/gparam.h  |  5 +++++
 gobject/gsignal.c | 16 ++++++++--------
 gobject/gvalue.c  |  8 ++++----
 4 files changed, 22 insertions(+), 17 deletions(-)

diff --git a/gobject/gparam.c b/gobject/gparam.c
index b336125e4..fa9da7aa9 100644
--- a/gobject/gparam.c
+++ b/gobject/gparam.c
@@ -887,8 +887,8 @@ struct _GParamSpecPool
   GHashTable  *hash_table;
 };
 
-static guint
-param_spec_pool_hash (gconstpointer key_spec)
+guint
+g_param_spec_pool_hash (gconstpointer key_spec)
 {
   const GParamSpec *key = key_spec;
   const gchar *p;
@@ -900,8 +900,8 @@ param_spec_pool_hash (gconstpointer key_spec)
   return h;
 }
 
-static gboolean
-param_spec_pool_equals (gconstpointer key_spec_1,
+gboolean
+g_param_spec_pool_equals (gconstpointer key_spec_1,
 			gconstpointer key_spec_2)
 {
   const GParamSpec *key1 = key_spec_1;
@@ -932,7 +932,7 @@ g_param_spec_pool_new (gboolean type_prefixing)
 
   memcpy (&pool->mutex, &init_mutex, sizeof (init_mutex));
   pool->type_prefixing = type_prefixing != FALSE;
-  pool->hash_table = g_hash_table_new (param_spec_pool_hash, param_spec_pool_equals);
+  pool->hash_table = g_hash_table_new (g_param_spec_pool_hash, g_param_spec_pool_equals);
 
   return pool;
 }
diff --git a/gobject/gparam.h b/gobject/gparam.h
index b6a554653..15cd96f1c 100644
--- a/gobject/gparam.h
+++ b/gobject/gparam.h
@@ -429,6 +429,11 @@ GLIB_AVAILABLE_IN_ALL
 GParamSpec**	g_param_spec_pool_list		(GParamSpecPool	*pool,
 						 GType		 owner_type,
 						 guint		*n_pspecs_p);
+GLIB_AVAILABLE_IN_ALL
+gboolean g_param_spec_pool_equals (gconstpointer key_spec_1,
+			gconstpointer key_spec_2);
+GLIB_AVAILABLE_IN_ALL
+guint g_param_spec_pool_hash (gconstpointer key_spec);
 
 
 /* contracts:
diff --git a/gobject/gsignal.c b/gobject/gsignal.c
index 2b6b0d05b..f84690c47 100644
--- a/gobject/gsignal.c
+++ b/gobject/gsignal.c
@@ -190,9 +190,9 @@ static inline void		emission_pop		(Emission	 *emission);
 static inline Emission*		emission_find		(guint		  signal_id,
 							 GQuark		  detail,
 							 gpointer	  instance);
-static gint			class_closures_cmp	(gconstpointer	  node1,
+       gint			g_class_closures_cmp	(gconstpointer	  node1,
 							 gconstpointer	  node2);
-static gint			signal_key_cmp		(gconstpointer	  node1,
+       gint			g_signal_key_cmp	(gconstpointer	  node1,
 							 gconstpointer	  node2);
 static	      gboolean		signal_emit_unlocked_R	(SignalNode	 *node,
 							 GQuark		  detail,
@@ -306,7 +306,7 @@ typedef struct
 static GBSearchArray *g_signal_key_bsa = NULL;
 static const GBSearchConfig g_signal_key_bconfig = {
   sizeof (SignalKey),
-  signal_key_cmp,
+  g_signal_key_cmp,
   G_BSEARCH_ARRAY_ALIGN_POWER2,
 };
 static GBSearchConfig g_signal_hlbsa_bconfig = {
@@ -316,7 +316,7 @@ static GBSearchConfig g_signal_hlbsa_bconfig = {
 };
 static GBSearchConfig g_class_closure_bconfig = {
   sizeof (ClassClosure),
-  class_closures_cmp,
+  g_class_closures_cmp,
   0,
 };
 static GHashTable    *g_handler_list_bsa_ht = NULL;
@@ -458,8 +458,8 @@ signal_id_lookup (const gchar *name,
   return 0;
 }
 
-static gint
-class_closures_cmp (gconstpointer node1,
+gint
+g_class_closures_cmp (gconstpointer node1,
 		    gconstpointer node2)
 {
   const ClassClosure *c1 = node1, *c2 = node2;
@@ -913,8 +913,8 @@ emission_find_innermost (gpointer instance)
   return NULL;
 }
 
-static gint
-signal_key_cmp (gconstpointer node1,
+gint
+g_signal_key_cmp (gconstpointer node1,
                 gconstpointer node2)
 {
   const SignalKey *key1 = node1, *key2 = node2;
diff --git a/gobject/gvalue.c b/gobject/gvalue.c
index c30501a6b..c8fd090ae 100644
--- a/gobject/gvalue.c
+++ b/gobject/gvalue.c
@@ -121,7 +121,7 @@ typedef struct {
 
 
 /* --- prototypes --- */
-static gint	transform_entries_cmp	(gconstpointer bsearch_node1,
+gint	g_transform_entries_cmp	(gconstpointer bsearch_node1,
 					 gconstpointer bsearch_node2);
 
 
@@ -129,7 +129,7 @@ static gint	transform_entries_cmp	(gconstpointer bsearch_node1,
 static GBSearchArray *transform_array = NULL;
 static GBSearchConfig transform_bconfig = {
   sizeof (TransformEntry),
-  transform_entries_cmp,
+  g_transform_entries_cmp,
   G_BSEARCH_ARRAY_ALIGN_POWER2,
 };
 
@@ -481,8 +481,8 @@ transform_func_lookup (GType src_type,
   return NULL;
 }
 
-static gint
-transform_entries_cmp (gconstpointer bsearch_node1,
+gint
+g_transform_entries_cmp (gconstpointer bsearch_node1,
 		       gconstpointer bsearch_node2)
 {
   const TransformEntry *e1 = bsearch_node1;
-- 
2.26.2

