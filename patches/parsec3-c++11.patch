diff -ur parsec-3.0/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.cpp parsec-3.0-patched/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.cpp
--- parsec-3.0/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.cpp	2013-07-28 16:39:49.000000000 +0200
+++ parsec-3.0-patched/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.cpp	2020-06-01 11:58:56.088164674 +0200
@@ -98,7 +98,7 @@
 
 bool Directory_Exists (const std::string& dirname)
 {
-	return std::ifstream (dirname.c_str()) != 0;
+	return std::ifstream (dirname.c_str()).is_open();
 }
 
 bool Create_Directory (const std::string& dirname, bool exit_on_fail)
diff -ur parsec-3.0/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.h parsec-3.0-patched/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.h
--- parsec-3.0/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.h	2013-07-28 16:39:49.000000000 +0200
+++ parsec-3.0-patched/pkgs/apps/facesim/src/Public_Library/Read_Write/FILE_UTILITIES.h	2020-06-01 11:54:53.647258630 +0200
@@ -70,7 +70,7 @@
 
 inline bool File_Exists_Ignoring_Compression_Suffix (const std::string& filename)
 {
-	return std::ifstream (filename.c_str()) != 0;
+	return std::ifstream (filename.c_str()).is_open();
 }
 
 inline bool File_Exists (const std::string& filename)
@@ -80,7 +80,7 @@
 
 inline bool File_Writable_Ignoring_Compression_Suffix (const std::string& filename)
 {
-	return std::ofstream (filename.c_str()) != 0;
+	return std::ofstream (filename.c_str()).is_open();
 }
 
 inline bool File_Writable (const std::string& filename)
diff -ur parsec-3.0/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c parsec-3.0-patched/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c
--- parsec-3.0/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c	2020-06-01 11:17:18.755862023 +0200
+++ parsec-3.0-patched/pkgs/apps/ferret/src/benchmark/ferret-pthreads.c	2020-06-01 11:42:08.421004482 +0200
@@ -396,7 +396,7 @@
 		ARRAY_BEGIN_FOREACH(rank->result.u.list, cass_list_entry_t p)
 		{
 			char *obj = NULL;
-			if (p.dist == HUGE) continue;
+			if (p.dist == HUGE_VALF) continue;
 			cass_map_id_to_dataobj(query_table->map, p.id, &obj);
 			assert(obj != NULL);
 			fprintf(fout, "\t%s:%g", obj, p.dist);
diff -ur parsec-3.0/pkgs/apps/ferret/src/benchmark/ferret-serial.c parsec-3.0-patched/pkgs/apps/ferret/src/benchmark/ferret-serial.c
--- parsec-3.0/pkgs/apps/ferret/src/benchmark/ferret-serial.c	2013-07-28 16:39:48.000000000 +0200
+++ parsec-3.0-patched/pkgs/apps/ferret/src/benchmark/ferret-serial.c	2020-06-01 11:42:13.948934227 +0200
@@ -220,7 +220,7 @@
 	ARRAY_BEGIN_FOREACH(result.u.list, cass_list_entry_t p)
 	{
 		char *obj = NULL;
-		if (p.dist == HUGE) continue;
+		if (p.dist == HUGE_VALF) continue;
 		cass_map_id_to_dataobj(query_table->map, p.id, &obj);
 		assert(obj != NULL);
 		fprintf(fout, "\t%s:%g", obj, p.dist);
diff -ur parsec-3.0/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp parsec-3.0-patched/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp
--- parsec-3.0/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp	2013-07-28 16:39:48.000000000 +0200
+++ parsec-3.0-patched/pkgs/apps/ferret/src/benchmark/ferret-tbb.cpp	2020-06-01 11:42:21.092843430 +0200
@@ -404,7 +404,7 @@
 	ARRAY_BEGIN_FOREACH(data->first.rank.result.u.list, cass_list_entry_t p)
 	{
 		char *obj = NULL;
-		if (p.dist == HUGE) continue;
+		if (p.dist == HUGE_VALF) continue;
 		cass_map_id_to_dataobj(query_table->map, p.id, &obj);
 		assert(obj != NULL);
 		fprintf(fout, "\t%s:%g", obj, p.dist);
diff -ur parsec-3.0/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c parsec-3.0-patched/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c
--- parsec-3.0/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c	2013-07-28 16:39:48.000000000 +0200
+++ parsec-3.0-patched/pkgs/apps/ferret/src/src/lsh/LSH_query_batch.c	2020-06-01 11:43:36.803880853 +0200
@@ -139,7 +139,7 @@
 		}
 		LSH_hash2_noperturb(lsh, tmp, tmp2, L);
 
-		TOPK_INIT(topk[i], dist, K, HUGE);
+		TOPK_INIT(topk[i], dist, K, HUGE_VALF);
 		for (j = 0; j < L; j++)
 		{
 			int k;
@@ -320,9 +320,9 @@
 	for (i = 0; i < N; i++)
 	{
 		int j;
-		TOPK_INIT(topk[i], dist, K, HUGE);
+		TOPK_INIT(topk[i], dist, K, HUGE_VALF);
 		for (j = 0; j < T; j++)
-			TOPK_INIT(ptopk[i][j], dist, K, HUGE);
+			TOPK_INIT(ptopk[i][j], dist, K, HUGE_VALF);
 	}
 
 	//stimer_tuck(&tmr, "Stage-2");
diff -ur parsec-3.0/pkgs/apps/ferret/src/src/lsh/LSH_query.c parsec-3.0-patched/pkgs/apps/ferret/src/src/lsh/LSH_query.c
--- parsec-3.0/pkgs/apps/ferret/src/src/lsh/LSH_query.c	2013-07-28 16:39:48.000000000 +0200
+++ parsec-3.0-patched/pkgs/apps/ferret/src/src/lsh/LSH_query.c	2020-06-01 11:42:54.756415499 +0200
@@ -197,7 +197,7 @@
 	sx = sy = sxx = sxy = 0.0;
 	for (j = 0; j < K-1; j++)
 	{
-		if (query->topk[K - j - 2].dist >= HUGE) break;
+		if (query->topk[K - j - 2].dist >= HUGE_VALF) break;
 		lk = log(j+1); 
 		ld = log(query->topk[K - j - 2].dist);
 		sx += lk;
@@ -243,7 +243,7 @@
 	for (i = 0; i < L; i++)
 	{
 		memset(_topk[i], 0xff, sizeof (*_topk[i]) * K);
-		TOPK_INIT(_topk[i], dist, K, HUGE);
+		TOPK_INIT(_topk[i], dist, K, HUGE_VALF);
 		ARRAY_BEGIN_FOREACH(lsh->hash[i].bucket[tmp2[i]], uint32_t id) {
 			if (!bitmap_contain(query->bitmap, id))
 			{
@@ -358,7 +358,7 @@
 	int i, j;
 
 	memset(topk, 0xff, sizeof (*topk) * K);
-	TOPK_INIT(topk, dist, K, HUGE);
+	TOPK_INIT(topk, dist, K, HUGE_VALF);
 
 //	query->CC = 0;
 
diff -ur parsec-3.0/pkgs/apps/facesim/src/Public_Library/Arrays/ARRAY.h parsec-3.0-patched/pkgs/apps/facesim/src/Public_Library/Arrays/ARRAY.h
--- parsec-3.0/pkgs/apps/facesim/src/Public_Library/Arrays/ARRAY.h	2020-06-09 12:35:10.628114618 +0200
+++ parsec-3.0-patched/pkgs/apps/facesim/src/Public_Library/Arrays/ARRAY.h	2020-06-09 12:34:48.244011536 +0200
@@ -92,7 +92,10 @@
 
 	void Set_Base_Pointer (T* array)
 	{
-		base_pointer = array - 1;
+    if (array)
+      base_pointer = array - 1;
+    else
+      base_pointer = array;
 	}
 
 	T* Get_Array_Pointer() const
@@ -102,7 +105,8 @@
 
 	void Deallocate_Base_Pointer()
 	{
-		delete[] (base_pointer + 1);
+    if (base_pointer)
+      delete[] (base_pointer + 1);
 	}
 
 	ARRAY<T>& operator= (const ARRAY<T>& source)
